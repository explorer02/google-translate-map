{"version":3,"sources":["components/Backdrop/Backdrop.js","components/Button/Button.js","components/Modal/Modal.js","components/SpeectToText/SpeechToText.js","components/TextToSpeect/TextToSpeech.js","App.js","reportWebVitals.js","index.js"],"names":["Backdrop","props","className","children","Button","onClick","text","Modal","SpeechToText","onCloseDialog","useSpeechRecognition","transcript","resetTranscript","recordingBox","SpeechRecognition","browserSupportsSpeechRecognition","startListening","continuous","stopListening","abortListening","navigator","clipboard","writeText","icon","faClipboardCheck","style","width","height","color","TextToSpeech","useState","input","setInput","isPaused","setIsPaused","value","onChange","ev","target","utter","window","SpeechSynthesisUtterance","speechSynthesis","cancel","speak","resume","pause","App","showRecorder","setShowRecorder","showSpeaker","setShowSpeaker","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.900fdef5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './backdrop.css';\r\n\r\nconst Backdrop = (props) => {\r\n\treturn <div className=\"backdrop\">{props.children}</div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import React from 'react';\r\nimport './button.css';\r\n\r\nconst Button = ({ onClick, text, ...props }) => {\r\n\treturn (\r\n\t\t<button className=\"custom-button\" onClick={onClick}>\r\n\t\t\t{text}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './modal.css';\r\n\r\nconst Modal = (props) => {\r\n\treturn <div className=\"modal\">{props.children}</div>;\r\n};\r\n\r\nexport default Modal;\r\n","import { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useState } from 'react';\r\nimport SpeechRecognition, {\r\n\tuseSpeechRecognition\r\n} from 'react-speech-recognition';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport Button from '../Button/Button';\r\nimport Modal from '../Modal/Modal';\r\nimport './speech-to-text.css';\r\n\r\nconst SpeechToText = ({ onCloseDialog }) => {\r\n\tconst { transcript, resetTranscript } = useSpeechRecognition();\r\n\r\n\tconst closeDialoghandler = () => {\r\n\t\tonCloseDialog();\r\n\t\tSpeechRecognition.abortListening();\r\n\t};\r\n\tconst startListeningHandler = () => {\r\n\t\tSpeechRecognition.startListening({ continuous: true });\r\n\t};\r\n\tconst stopListeningHandler = () => {\r\n\t\tSpeechRecognition.stopListening();\r\n\t};\r\n\r\n\tlet recordingBox = (\r\n\t\t<div className=\"stt-error\">\r\n\t\t\t<p>Speech Recognition Not supported in your Browser</p>\r\n\t\t\t<Button text=\"Cancel\" onClick={onCloseDialog} />\r\n\t\t</div>\r\n\t);\r\n\tconst copyToClipboard = () => {\r\n\t\tnavigator.clipboard.writeText(transcript);\r\n\t};\r\n\r\n\tif (SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n\t\trecordingBox = (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"stt-controls\">\r\n\t\t\t\t\t<Button text=\"Start\" onClick={startListeningHandler} />\r\n\t\t\t\t\t<Button text=\"Stop\" onClick={stopListeningHandler} />\r\n\t\t\t\t\t<Button text=\"Clear\" onClick={resetTranscript} />\r\n\t\t\t\t\t<Button text=\"Cancel\" onClick={closeDialoghandler} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"stt-output\">\r\n\t\t\t\t\t{transcript}\r\n\t\t\t\t\t<div className=\"stt-copy\" onClick={copyToClipboard}>\r\n\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\ticon={faClipboardCheck}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\theight: '100%',\r\n\t\t\t\t\t\t\t\tcolor: 'grey'\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<Backdrop>\r\n\t\t\t\t<Modal>\r\n\t\t\t\t\t<div className=\"stt\">{recordingBox}</div>\r\n\t\t\t\t</Modal>\r\n\t\t\t</Backdrop>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default SpeechToText;\r\n","import { useState } from 'react';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport Button from '../Button/Button';\r\nimport Modal from '../Modal/Modal';\r\nimport './text-to-speech.css';\r\n\r\nconst TextToSpeech = ({ onCloseDialog }) => {\r\n\tconst [input, setInput] = useState('');\r\n\tconst [isPaused, setIsPaused] = useState(false);\r\n\r\n\tconst startSpeaking = () => {\r\n\t\tconst utter = new window.SpeechSynthesisUtterance(input);\r\n\t\twindow.speechSynthesis.cancel();\r\n\t\twindow.speechSynthesis.speak(utter);\r\n\t\tsetIsPaused(false);\r\n\t};\r\n\tconst pauseSpeaking = () => {\r\n\t\twindow.speechSynthesis.pause();\r\n\t\tsetIsPaused(true);\r\n\t};\r\n\tconst resumeSpeaking = () => {\r\n\t\twindow.speechSynthesis.resume();\r\n\t\tsetIsPaused(false);\r\n\t};\r\n\r\n\tconst closeDialogHandler = () => {\r\n\t\tonCloseDialog();\r\n\t\twindow.speechSynthesis.cancel();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Backdrop>\r\n\t\t\t<Modal>\r\n\t\t\t\t<div className=\"tts\">\r\n\t\t\t\t\t<div className=\"tts-input\">\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tvalue={input}\r\n\t\t\t\t\t\t\tonChange={(ev) => setInput(ev.target.value)}\r\n\t\t\t\t\t\t></textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"tts-controls\">\r\n\t\t\t\t\t\t<Button text=\"Speak\" onClick={startSpeaking} />\r\n\t\t\t\t\t\t{isPaused ? (\r\n\t\t\t\t\t\t\t<Button text={'Resume'} onClick={resumeSpeaking} />\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<Button text={'Pause'} onClick={pauseSpeaking} />\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<Button text=\"Cancel\" onClick={closeDialogHandler} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t</Backdrop>\r\n\t);\r\n};\r\n\r\nexport default TextToSpeech;\r\n","import React, { useState } from 'react';\nimport SpeechToText from './components/SpeectToText/SpeechToText';\nimport './App.css';\nimport Button from './components/Button/Button';\nimport TextToSpeech from './components/TextToSpeect/TextToSpeech';\nconst App = () => {\n\tconst [showRecorder, setShowRecorder] = useState(false);\n\tconst [showSpeaker, setShowSpeaker] = useState(false);\n\n\tconst openRecorderHandler = () => {\n\t\tsetShowRecorder(true);\n\t};\n\tconst closeRecorderHandler = () => {\n\t\tsetShowRecorder(false);\n\t};\n\tconst openSpeakerHandler = () => {\n\t\tsetShowSpeaker(true);\n\t};\n\tconst closeSpeakerHandler = () => {\n\t\tsetShowSpeaker(false);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{showRecorder && <SpeechToText onCloseDialog={closeRecorderHandler} />}\n\t\t\t<Button onClick={openRecorderHandler} text=\"Speech to Text\" />\n\n\t\t\t{showSpeaker && <TextToSpeech onCloseDialog={closeSpeakerHandler} />}\n\t\t\t<Button onClick={openSpeakerHandler} text=\"Text to Speech\" />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}