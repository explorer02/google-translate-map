{"version":3,"sources":["components/Backdrop/Backdrop.js","components/Button/Button.js","components/Modal/Modal.js","components/SpeectToText/SpeechToText.js","components/TextToSpeect/TextToSpeech.js","Spinner/Spinner.js","components/Locater/Locater.js","components/Translator/Translator.js","App.js","reportWebVitals.js","index.js"],"names":["Backdrop","props","className","children","Button","onClick","text","disabled","Modal","longer","SpeechToText","onCloseDialog","useSpeechRecognition","transcript","resetTranscript","recordingBox","SpeechRecognition","browserSupportsSpeechRecognition","startListening","continuous","stopListening","abortListening","navigator","clipboard","writeText","icon","faClipboardCheck","style","width","height","color","TextToSpeech","useState","input","setInput","isPaused","setIsPaused","value","onChange","ev","target","utter","window","SpeechSynthesisUtterance","speechSynthesis","cancel","speak","resume","pause","Spinner","Locater","showLoader","setShowLoader","lat","lng","location","setLocation","locationBox","geolocation","getCurrentPosition","position","coords","latitude","longitude","href","rel","alphabets","nums","BrailleButton","char","Translator","map","a","index","s","String","fromCharCode","n","slice","type","e","App","showModal","setShowModal","openModalHandler","option","closeModalHandler","modalBox","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4433fd4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './backdrop.css';\r\n\r\nconst Backdrop = (props) => {\r\n\treturn <div className=\"backdrop\">{props.children}</div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import React from 'react';\r\nimport './button.css';\r\n\r\nconst Button = ({ onClick, text, disabled, ...props }) => {\r\n\treturn (\r\n\t\t<button className=\"custom-button\" onClick={onClick} disabled={disabled}>\r\n\t\t\t{text}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './modal.css';\r\n\r\nconst Modal = ({ longer, ...props }) => {\r\n\treturn (\r\n\t\t<div className={'modal ' + (longer ? 'longer' : '')}>{props.children}</div>\r\n\t);\r\n};\r\n\r\nexport default Modal;\r\n","import { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport SpeechRecognition, {\r\n\tuseSpeechRecognition\r\n} from 'react-speech-recognition';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport Button from '../Button/Button';\r\nimport Modal from '../Modal/Modal';\r\nimport './speech-to-text.css';\r\n\r\nconst SpeechToText = ({ onCloseDialog }) => {\r\n\tconst { transcript, resetTranscript } = useSpeechRecognition();\r\n\r\n\tconst closeDialoghandler = () => {\r\n\t\tonCloseDialog();\r\n\t\tSpeechRecognition.abortListening();\r\n\t};\r\n\tconst startListeningHandler = () => {\r\n\t\tSpeechRecognition.startListening({ continuous: true });\r\n\t};\r\n\tconst stopListeningHandler = () => {\r\n\t\tSpeechRecognition.stopListening();\r\n\t};\r\n\r\n\tlet recordingBox = (\r\n\t\t<div className=\"stt-error\">\r\n\t\t\t<p>Speech Recognition Not supported in your Browser</p>\r\n\t\t\t<Button text=\"Cancel\" onClick={onCloseDialog} />\r\n\t\t</div>\r\n\t);\r\n\tconst copyToClipboard = () => {\r\n\t\tnavigator.clipboard.writeText(transcript);\r\n\t};\r\n\r\n\tif (SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n\t\trecordingBox = (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"stt-controls\">\r\n\t\t\t\t\t<Button text=\"Start\" onClick={startListeningHandler} />\r\n\t\t\t\t\t<Button text=\"Stop\" onClick={stopListeningHandler} />\r\n\t\t\t\t\t<Button text=\"Clear\" onClick={resetTranscript} />\r\n\t\t\t\t\t<Button text=\"Cancel\" onClick={closeDialoghandler} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"stt-output\">\r\n\t\t\t\t\t{transcript}\r\n\t\t\t\t\t<div className=\"stt-copy\" onClick={copyToClipboard}>\r\n\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\ticon={faClipboardCheck}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\theight: '100%',\r\n\t\t\t\t\t\t\t\tcolor: 'grey'\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<Backdrop>\r\n\t\t\t\t<Modal>\r\n\t\t\t\t\t<div className=\"stt\">{recordingBox}</div>\r\n\t\t\t\t</Modal>\r\n\t\t\t</Backdrop>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default SpeechToText;\r\n","import { useState } from 'react';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport Button from '../Button/Button';\r\nimport Modal from '../Modal/Modal';\r\nimport './text-to-speech.css';\r\n\r\nconst TextToSpeech = ({ onCloseDialog }) => {\r\n\tconst [input, setInput] = useState('');\r\n\tconst [isPaused, setIsPaused] = useState(false);\r\n\r\n\tconst startSpeaking = () => {\r\n\t\tconst utter = new window.SpeechSynthesisUtterance(input);\r\n\t\twindow.speechSynthesis.cancel();\r\n\t\twindow.speechSynthesis.speak(utter);\r\n\t\tsetIsPaused(false);\r\n\t};\r\n\tconst pauseSpeaking = () => {\r\n\t\twindow.speechSynthesis.pause();\r\n\t\tsetIsPaused(true);\r\n\t};\r\n\tconst resumeSpeaking = () => {\r\n\t\twindow.speechSynthesis.resume();\r\n\t\tsetIsPaused(false);\r\n\t};\r\n\r\n\tconst closeDialogHandler = () => {\r\n\t\tonCloseDialog();\r\n\t\twindow.speechSynthesis.cancel();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Backdrop>\r\n\t\t\t<Modal>\r\n\t\t\t\t<div className=\"tts\">\r\n\t\t\t\t\t<div className=\"tts-input\">\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tvalue={input}\r\n\t\t\t\t\t\t\tonChange={(ev) => setInput(ev.target.value)}\r\n\t\t\t\t\t\t></textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"tts-controls\">\r\n\t\t\t\t\t\t<Button text=\"Speak\" onClick={startSpeaking} />\r\n\t\t\t\t\t\t{isPaused ? (\r\n\t\t\t\t\t\t\t<Button text={'Resume'} onClick={resumeSpeaking} />\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<Button text={'Pause'} onClick={pauseSpeaking} />\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<Button text=\"Cancel\" onClick={closeDialogHandler} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t</Backdrop>\r\n\t);\r\n};\r\n\r\nexport default TextToSpeech;\r\n","import React from 'react';\r\nimport './spinner.css';\r\nconst Spinner = () => {\r\n\treturn <div className=\"loader\">Loading...</div>;\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState } from 'react';\r\nimport './locater.css';\r\nimport Button from '../Button/Button';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport Modal from '../Modal/Modal';\r\nimport Spinner from '../../Spinner/Spinner';\r\nconst Locater = ({ onCloseDialog }) => {\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [location, setLocation] = useState({ lat: null, lng: null });\r\n\r\n\tconst getLocation = () => {\r\n\t\tsetShowLoader(true);\r\n\t\tnavigator.geolocation.getCurrentPosition(function (position) {\r\n\t\t\tsetLocation({\r\n\t\t\t\tlat: position.coords.latitude,\r\n\t\t\t\tlng: position.coords.longitude\r\n\t\t\t});\r\n\t\t\tsetShowLoader(false);\r\n\t\t});\r\n\t};\r\n\r\n\tlet locationBox = (\r\n\t\t<>\r\n\t\t\t<Button text=\"Get Live Location\" onClick={getLocation} />\r\n\t\t\t{showLoader ? (\r\n\t\t\t\t<Spinner />\r\n\t\t\t) : location.lat ? (\r\n\t\t\t\t<a\r\n\t\t\t\t\thref={`https://maps.google.com/?q=${location.lat},${location.lng}`}\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noreferrer\"\r\n\t\t\t\t>\r\n\t\t\t\t\tOpen in maps\r\n\t\t\t\t</a>\r\n\t\t\t) : null}\r\n\t\t</>\r\n\t);\r\n\tif (!('geolocation' in navigator))\r\n\t\tlocationBox = <p>Location not accessible</p>;\r\n\r\n\treturn (\r\n\t\t<Backdrop>\r\n\t\t\t<Modal>\r\n\t\t\t\t<div className=\"locater\">\r\n\t\t\t\t\t{locationBox}\r\n\t\t\t\t\t<Button text=\"Cancel\" onClick={onCloseDialog} />\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t</Backdrop>\r\n\t);\r\n};\r\n\r\nexport default Locater;\r\n","import React, { useState } from 'react';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport Modal from '../Modal/Modal';\r\nimport './translator.css';\r\nimport Button from './../Button/Button';\r\n\r\nconst alphabets = [...'⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵'];\r\nconst nums = [...'⠴⠂⠆⠒⠲⠢⠖⠶⠦⠔'];\r\n\r\nconst Translator = ({ onCloseDialog }) => {\r\n\tconst [input, setInput] = useState('');\r\n\tconst copyOutputHandler = () => {\r\n\t\tnavigator.clipboard.writeText(input);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Backdrop>\r\n\t\t\t<Modal longer>\r\n\t\t\t\t<div className=\"translator\">\r\n\t\t\t\t\t<div className=\"braille-alphabets\">\r\n\t\t\t\t\t\t{alphabets.map((a, index) => (\r\n\t\t\t\t\t\t\t<BrailleButton\r\n\t\t\t\t\t\t\t\tchar={a}\r\n\t\t\t\t\t\t\t\tkey={a}\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tsetInput((s) => s + String.fromCharCode(index + 65));\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"braille-numbers\">\r\n\t\t\t\t\t\t{nums.map((n, index) => (\r\n\t\t\t\t\t\t\t<BrailleButton\r\n\t\t\t\t\t\t\t\tchar={n}\r\n\t\t\t\t\t\t\t\tkey={n}\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tsetInput((s) => s + String.fromCharCode(index + 48));\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"braille-extras\">\r\n\t\t\t\t\t\t<BrailleButton\r\n\t\t\t\t\t\t\tchar={''}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetInput((s) => s + ' ');\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<BrailleButton\r\n\t\t\t\t\t\t\tchar={'←'}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetInput((s) => s.slice(0, -1));\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclassName=\"translator-output\"\r\n\t\t\t\t\t\tvalue={input}\r\n\t\t\t\t\t\tonChange={(e) => setInput(e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className=\"translator-controls\">\r\n\t\t\t\t\t\t<Button onClick={copyOutputHandler} text=\"Copy\" />\r\n\t\t\t\t\t\t<Button onClick={onCloseDialog} text=\"Cancel\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t</Backdrop>\r\n\t);\r\n};\r\n\r\nconst BrailleButton = ({ char, onClick }) => {\r\n\treturn (\r\n\t\t<button className=\"braille-button\" onClick={onClick}>\r\n\t\t\t{char}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Translator;\r\n","import React, { useState } from 'react';\nimport SpeechToText from './components/SpeectToText/SpeechToText';\nimport './App.css';\nimport Button from './components/Button/Button';\nimport TextToSpeech from './components/TextToSpeect/TextToSpeech';\nimport Locater from './components/Locater/Locater';\nimport Translator from './components/Translator/Translator';\n\nconst OPTION_NONE = 0;\nconst OPTION_RECORDER = 1;\nconst OPTION_SPEAKER = 2;\nconst OPTION_LOCATER = 3;\nconst OPTION_TRANSLATOR = 4;\n\nconst App = () => {\n\tconst [showModal, setShowModal] = useState(OPTION_NONE);\n\n\tconst openModalHandler = (option) => {\n\t\tsetShowModal(option);\n\t};\n\tconst closeModalHandler = () => {\n\t\tsetShowModal(OPTION_NONE);\n\t};\n\n\tlet modalBox = null;\n\tswitch (showModal) {\n\t\tcase OPTION_RECORDER:\n\t\t\tmodalBox = <SpeechToText onCloseDialog={closeModalHandler} />;\n\t\t\tbreak;\n\t\tcase OPTION_SPEAKER:\n\t\t\tmodalBox = <TextToSpeech onCloseDialog={closeModalHandler} />;\n\t\t\tbreak;\n\t\tcase OPTION_LOCATER:\n\t\t\tmodalBox = <Locater onCloseDialog={closeModalHandler} />;\n\t\t\tbreak;\n\t\tcase OPTION_TRANSLATOR:\n\t\t\tmodalBox = <Translator onCloseDialog={closeModalHandler} />;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmodalBox = null;\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Button\n\t\t\t\tonClick={() => openModalHandler(OPTION_RECORDER)}\n\t\t\t\ttext=\"Speech to Text\"\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tonClick={() => openModalHandler(OPTION_SPEAKER)}\n\t\t\t\ttext=\"Text to Speech\"\n\t\t\t/>\n\t\t\t<Button onClick={() => openModalHandler(OPTION_LOCATER)} text=\"Locater\" />\n\t\t\t<Button\n\t\t\t\tonClick={() => openModalHandler(OPTION_TRANSLATOR)}\n\t\t\t\ttext=\"Translator\"\n\t\t\t/>\n\t\t\t{modalBox}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}